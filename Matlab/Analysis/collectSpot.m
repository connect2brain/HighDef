function [newrow, R2_map] = collectSpot(basepath, ID, exp_id, roi_id, response_id, which_split)
if nargin == 5
    split_path = "";
else
    split_path = sprintf("/%s", which_split);
end
newrow = table();

sourceSpaceFile = sprintf('%s/%s/results/exp_%s/r2/mesh_mesh0/roi_%s/%s/sigmoid4%s/r2_roi_data.hdf5', basepath, ID, exp_id, roi_id, response_id, split_path);
sourceSpaceGeoFile = sprintf('%s/%s/results/exp_%s/r2/mesh_mesh0/roi_%s/%s/sigmoid4%s/r2_roi_geo.hdf5', basepath, ID, exp_id, roi_id, response_id, split_path);
rejectionFile = sprintf('%s/%s/results/exp_%s/r2/mesh_mesh0/roi_%s/%s/sigmoid4%s/r2_roi_rejected.csv', basepath, ID, exp_id, roi_id, response_id, split_path);
coilSpacePath   = sprintf('%s/%s/opt/%s/%s_*/mesh0/E_mag/opt_coil_pos.hdf5', basepath, ID, exp_id, response_id);
match = dir(coilSpacePath);

R2_map = false;

if isfile(sourceSpaceGeoFile) && isfile(sourceSpaceFile)
    R2 = h5read(sourceSpaceFile, '/data/tris/c_E_mag');
    %R2 = reject_R2_outliers_if_needed(R2);
    % instead of doing rejection here again, use the one from python
    fname = 'config.json'; 
    fid = fopen(fname); 
    cfg = jsondecode(char(fread(fid,inf)')); 
    fclose(fid); 
    
    % This is really not very important: Only for plotting, and dubious
    % even then.
    if max(R2) < cfg.R2_rejection.only_apply_if_best_R2_is_lower_than
        if isfile(rejectionFile)
            rejected_triangles = table2array(readtable(rejectionFile));
            R2(rejected_triangles) = 0;
        else
            warning("Wanted to reject triangles bc. max RÂ² < %3.3f, but no rejection file found (generated by 08_calc_opt_coil_pos.py)", cfg.R2_rejection.only_apply_if_best_R2_is_lower_than)
        end
    end

    R2(isnan(R2)) = 0;
    R2_map = R2;
    [maxR2, whichTriangle] = max(R2);

    coordinates = h5read(sourceSpaceGeoFile, '/mesh/nodes/node_coord');
    triangles = h5read(sourceSpaceGeoFile, '/mesh/elm/triangle_number_list')' + 1;
    sourceSpaceLocation = mean(coordinates(:,triangles(whichTriangle,:)), 2);

    X_source = sourceSpaceLocation(1);
    Y_source = sourceSpaceLocation(2);
    Z_source = sourceSpaceLocation(3);

    R2 = maxR2;

    if ~isempty(match)
        tolerance = 1e-2;
        matching_match = arrayfun(@(m) all(abs([X_source Y_source Z_source] - str2num(extractAfter(extractBefore(m.folder, "]"), "_["))) < tolerance), match);
        if sum(matching_match) == 1
            match = match(matching_match);
            coilSpaceFile = sprintf('%s/%s', match.folder, match.name);
            transformSimNIBS = squeeze(h5read(coilSpaceFile, '/matsimnibs'))';
            transform = [transformSimNIBS(:,3), -transformSimNIBS(:,2), transformSimNIBS(:,1), transformSimNIBS(:,4)];
            angles = eul(se3(transform));
            Angle_in_rad = angles(3);

            X_coil = transform(1,4);
            Y_coil = transform(2,4);
            Z_coil = transform(3,4);
        else
            warning('Expected exactly one file for %s %s %s %s, but found %d:\n expect: X=%0.2f Y=%0.2f Z=%0.2f, but found: %d', ID, exp_id, roi_id, response_id, sum(matching_match), X_source, Y_source, Z_source)
            
            Angle_in_rad = nan;
            X_coil = nan;
            Y_coil = nan;
            Z_coil = nan;
        end
        





        Subject = ID;
        newrow = table(Subject, X_source, Y_source, Z_source, X_coil, Y_coil, Z_coil, Angle_in_rad, R2);
    end
else
    warning("Did not find both %s and %s (both required!)", sourceSpaceGeoFile, sourceSpaceFile)
end
end